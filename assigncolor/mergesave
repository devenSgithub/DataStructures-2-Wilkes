

void colorgraph::mergeSort(inDegreep * a)  {

    //make an empty copy of a
    inDegreep *tmpArray;
    tmpArray = new inDegreep[numberofelements];
    for (int i = 0; i < numberofelements; i++){
        tmpArray[i]=NULL;
    }

    mergeSort( a, tmpArray, 0, numberofelements - 1 );


}






void colorgraph::mergeSort(inDegreep * a, inDegreep * tmpArray, int left, int right)  {

    if( left < right ){
        int center = ( left + right ) / 2;
        mergeSort( a, tmpArray, left, center );
        mergeSort( a, tmpArray, center + 1, right );
        merge( a, tmpArray, left, center + 1, right );
    }

}




void colorgraph::merge(inDegreep * a, inDegreep * tmpArray, int leftPos, int rightPos, int rightEnd)  {
   
    int leftEnd = rightPos - 1;
    int tmpPos = leftPos;
    int numElements = rightEnd - leftPos + 1;

    // Main loop
    while( leftPos <= leftEnd && rightPos <= rightEnd ){
        if( a[ leftPos ]->indegreeOfNode <= a[ rightPos ]->indegreeOfNode ){
            tmpArray[ tmpPos++ ] = std::move( a[ leftPos++ ] );
        }else{
            tmpArray[ tmpPos++ ] = std::move( a[ rightPos++ ] );
        }
    }
    while( leftPos <= leftEnd ){ // Copy rest of first half
        tmpArray[ tmpPos++ ] = std::move( a[ leftPos++ ] );
    }
    while( rightPos <= rightEnd ){ // Copy rest of right half
        tmpArray[ tmpPos++ ] = std::move( a[ rightPos++ ] );
    }
    // Copy tmpArray back
    for( int i = 0; i < numElements; ++i, --rightEnd ){
        a[ rightEnd ] = std::move( tmpArray[ rightEnd ] );
    }





    inDegree *tempdisplaydeg;
    tempdisplaydeg = new inDegree;
    cout<<"Displaying the degree list:"<<endl;
    for (int i = 0; i < numberofelements; i++){
        tempdisplaydeg = a[i];
        cout<<"The degree of "<< tempdisplaydeg->nodename <<": "<<tempdisplaydeg->indegreeOfNode<<endl;

    }






}


